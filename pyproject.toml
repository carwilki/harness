[tool.poetry]
name = "harness"
version = "0.1.0"
description = "TBD"
authors = ["Carson Wilkins <carson.wilkins@databricks.com>"]
license = "MIT"
readme = "README.md"
exclude = ["./test","./examples"]

[tool.poetry.dependencies]
python = "3.10.*"
databricks-cli = "^0.17.7"
pydantic-config = "^0.1.1"
pydantic = "^1.10.8"
databricks-sdk = "^0.1.8"
datacompy = { version = "^0.10.1", extras = ["spark"] }
pyspark = "^3.4.0"
delta-spark = "^2.4.0"
pytest-freezegun = "^0.4.2"

[tool.poetry.group.dev.dependencies]
pytest = "^7.3.1"
nutter = "^0.1.35"
faker = "^18.10.1"
pytest-mock = "^3.10.0"
isort = "^5.12.0"
black = "^23.3.0"
pytest-faker = "^2.0.0"
pytest-cov = "^4.1.0"
pylint = "^2.17.4"
graphviz = "^0.20.1"
flake8 = "^6.0.0"

[tool.pytest.ini_options]
pythonpath = [".","harness","tests"]
addopts = ["--import-mode=importlib"]

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.coverage.run]
branch = true
omit = ["tests/*"]

[tool.coverage.report]
# Regexes for lines to exclude from consideration
exclude_also = [
    # Don't complain about missing debug-only code:
    "def __repr__",
    "if self\\.debug",

    # Don't complain if tests don't hit defensive assertion code:
    "raise AssertionError",
    "raise NotImplementedError",

    # Don't complain if non-runnable code isn't run:
    "if 0:",
    "if __name__ == .__main__.:",

    # Don't complain about abstract methods, they aren't run:
    "@(abc\\.)?abstractmethod",
]

ignore_errors = true

[tool.coverage.html]
directory = "coverage_html_report"

[tool.isort]
profile = "black"
skip_gitignore = true
line_length = 120